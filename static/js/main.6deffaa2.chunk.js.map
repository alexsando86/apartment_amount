{"version":3,"sources":["components/SpinnerBox.tsx","components/ApartmentAmount.tsx","App.tsx","reducers/index.ts","fetchData.ts","saga/index.ts","actions/actions.ts","index.tsx"],"names":["SpinnerBox","justifyContent","alignItems","style","position","left","top","bottom","right","background","thickness","speed","emptyColor","size","color","zIndex","ApartmentAmount","useState","active","setActive","sortState","setSortState","isLoading","setIsLoading","aptReducer","useSelector","state","day","Date","year","getFullYear","month","getMonth","useEffect","length","m","fontSize","as","variant","onClick","aptSorting","map","item","sort","a","b","아파트","prev","handleApt","cursor","건축년도","handleYear","일","handleDate","거래금액","handlePayment","index","전용면적","도로명","법정동","년","월","층","App","dispatch","useDispatch","React","type","theme","minH","p","gridTemplateRows","initialState","rootReducer","combineReducers","action","payload","today","slice","month2","date","getDate","yesterday","thatMonth","fetchApiData","gMonth","customMonth","url","queryParams","encodeURIComponent","getUrl","axios","method","then","response","data","body","items","console","log","workerSaga","rootSaga","call","put","error","takeEvery","sagaMiddleware","createSagaMiddleware","store","createStore","rootRecuder","applyMiddleware","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6deffaa2.chunk.js","sourcesContent":["import { Flex, Spinner } from '@chakra-ui/react'\r\nimport React from 'react'\r\n\r\nconst SpinnerBox = () => {\r\n\treturn (\r\n\t\t<Flex justifyContent=\"center\" alignItems=\"center\" style={{position:\"fixed\", left:0,top:0,bottom:0,right:0,background:\"rgba(0,0,0,.3)\"}}>\r\n\t\t\t<Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" size=\"xl\" color=\"red.500\" zIndex=\"10\" />\r\n\t\t</Flex>\r\n\t)\r\n}\r\n\r\nexport default SpinnerBox\r\n","import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { Box, Flex, Heading, Spinner, Text, Table, TableCaption, Tbody, Td, Tfoot, Th, Thead, Tr } from \"@chakra-ui/react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport SpinnerBox from \"./SpinnerBox\";\r\n\r\ntype apartmentTypes = {\r\n\t아파트: string;\r\n\t전용면적: number;\r\n\t건축년도: number;\r\n\t도로명: string;\r\n\t법정동: string;\r\n\t년: number;\r\n\t월: number;\r\n\t일: number;\r\n\t층: number;\r\n\t거래금액: number;\r\n};\r\n\r\nconst ApartmentAmount = () => {\r\n\tconst [active, setActive] = useState(true);\r\n\tconst [sortState, setSortState] = useState([]);\r\n\tconst [isLoading, setIsLoading] = useState(true);\r\n\tconst aptReducer = useSelector((state: any) => state.aptReducer);\r\n\r\n\tconst handleApt = () => {\r\n\t\tconst aptSorting = aptReducer\r\n\t\t\t.map((item: apartmentTypes) => item)\r\n\t\t\t.sort((a: apartmentTypes, b: apartmentTypes) => {\r\n\t\t\t\tif (active) {\r\n\t\t\t\t\treturn a.아파트 < b.아파트 ? -1 : a.아파트 === b.아파트 ? 0 : 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn a.아파트 > b.아파트 ? -1 : a.아파트 === b.아파트 ? 0 : 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tsetSortState(aptSorting);\r\n\t\tsetActive((prev) => !prev);\r\n\t};\r\n\r\n\tconst handleYear = () => {\r\n\t\tconst aptSorting = aptReducer\r\n\t\t\t.map((item: apartmentTypes) => item)\r\n\t\t\t.sort((a: apartmentTypes, b: apartmentTypes) => {\r\n\t\t\t\tif (active) {\r\n\t\t\t\t\treturn a.건축년도 < b.건축년도 ? -1 : a.건축년도 === b.건축년도 ? 0 : 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn a.건축년도 > b.건축년도 ? -1 : a.건축년도 === b.건축년도 ? 0 : 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tsetSortState(aptSorting);\r\n\t\tsetActive((prev) => !prev);\r\n\t};\r\n\r\n\tconst handleDate = () => {\r\n\t\tconst aptSorting = aptReducer\r\n\t\t\t.map((item: apartmentTypes) => item)\r\n\t\t\t.sort((a: apartmentTypes, b: apartmentTypes) => {\r\n\t\t\t\tif (active) {\r\n\t\t\t\t\treturn a.일 < b.일 ? -1 : a.일 === b.일 ? 0 : 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn a.일 > b.일 ? -1 : a.일 === b.일 ? 0 : 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tsetSortState(aptSorting);\r\n\t\tsetActive((prev) => !prev);\r\n\t};\r\n\r\n\tconst handlePayment = () => {\r\n\t\tconst aptSorting = aptReducer\r\n\t\t\t.map((item: apartmentTypes) => item)\r\n\t\t\t.sort((a: apartmentTypes, b: apartmentTypes) => {\r\n\t\t\t\tif (active) {\r\n\t\t\t\t\treturn a.거래금액 < b.거래금액 ? -1 : a.거래금액 === b.거래금액 ? 0 : 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn a.거래금액 > b.거래금액 ? -1 : a.거래금액 === b.거래금액 ? 0 : 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tsetSortState(aptSorting);\r\n\t\tsetActive((prev) => !prev);\r\n\t};\r\n\r\n\tconst day = new Date();\r\n\tconst year = day.getFullYear();\r\n\tconst month = day.getMonth() + 1;\r\n\r\n\tuseEffect(() => {\r\n\t\taptReducer.length > 0 && setIsLoading(false);\r\n\t}, [aptReducer.length]);\r\n\r\n\treturn (\r\n\t\t<Box m={4}>\r\n\t\t\t<Heading fontSize=\"lg\" m={4}>\r\n\t\t\t\t{`${year}년${month}월`} 김포 아파트 실거래가\r\n\t\t\t\t<Text as=\"span\" fontSize=\"sm\" m={4}>\r\n\t\t\t\t\t총 거래건수: {aptReducer.length}건\r\n\t\t\t\t</Text>\r\n\t\t\t</Heading>\r\n\t\t\t{isLoading && <SpinnerBox />}\r\n\t\t\t{!isLoading && (\r\n\t\t\t\t<Table variant=\"striped\" size=\"md\">\r\n\t\t\t\t\t<TableCaption>\r\n\t\t\t\t\t\t{year}년 {month}월 거래내역\r\n\t\t\t\t\t</TableCaption>\r\n\t\t\t\t\t<Thead>\r\n\t\t\t\t\t\t<Tr>\r\n\t\t\t\t\t\t\t<Th onClick={() => handleApt()} cursor=\"pointer\">\r\n\t\t\t\t\t\t\t\t아파트{\" \"}\r\n\t\t\t\t\t\t\t\t<Box as=\"span\" fontSize=\"lg\">\r\n\t\t\t\t\t\t\t\t\t🔄\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Th>\r\n\t\t\t\t\t\t\t<Th>전용면적</Th>\r\n\t\t\t\t\t\t\t<Th onClick={() => handleYear()} cursor=\"pointer\">\r\n\t\t\t\t\t\t\t\t건축년도{\" \"}\r\n\t\t\t\t\t\t\t\t<Box as=\"span\" fontSize=\"lg\">\r\n\t\t\t\t\t\t\t\t\t🔄\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Th>\r\n\t\t\t\t\t\t\t<Th>도로명</Th>\r\n\t\t\t\t\t\t\t<Th>법정동</Th>\r\n\t\t\t\t\t\t\t<Th onClick={() => handleDate()} cursor=\"pointer\">\r\n\t\t\t\t\t\t\t\t거래날짜{\" \"}\r\n\t\t\t\t\t\t\t\t<Box as=\"span\" fontSize=\"lg\">\r\n\t\t\t\t\t\t\t\t\t🔄\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Th>\r\n\t\t\t\t\t\t\t<Th>층</Th>\r\n\t\t\t\t\t\t\t<Th onClick={() => handlePayment()} cursor=\"pointer\">\r\n\t\t\t\t\t\t\t\t거래금액(만원){\" \"}\r\n\t\t\t\t\t\t\t\t<Box as=\"span\" fontSize=\"lg\">\r\n\t\t\t\t\t\t\t\t\t🔄\r\n\t\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t\t</Th>\r\n\t\t\t\t\t\t</Tr>\r\n\t\t\t\t\t</Thead>\r\n\t\t\t\t\t<Tbody>\r\n\t\t\t\t\t\t{sortState?.map((item: apartmentTypes, index: number) => {\r\n\t\t\t\t\t\t\tconst { 아파트, 전용면적, 건축년도, 도로명, 법정동, 년, 월, 일, 층, 거래금액 } = item;\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<Tr key={index}>\r\n\t\t\t\t\t\t\t\t\t<Td>{아파트}</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>{전용면적}</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>{건축년도}</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>{도로명}</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>{법정동}</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>\r\n\t\t\t\t\t\t\t\t\t\t{년}-{월}-{일}\r\n\t\t\t\t\t\t\t\t\t</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>{층}</Td>\r\n\t\t\t\t\t\t\t\t\t<Td>{거래금액}</Td>\r\n\t\t\t\t\t\t\t\t</Tr>\r\n\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t})}\r\n\t\t\t\t\t</Tbody>\r\n\t\t\t\t</Table>\r\n\t\t\t)}\r\n\t\t</Box>\r\n\t);\r\n};\r\n\r\nexport default ApartmentAmount;\r\n","import * as React from \"react\";\r\nimport { ChakraProvider, Grid, theme } from \"@chakra-ui/react\";\r\nimport ApartmentAmount from \"./components/ApartmentAmount\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Header from \"./components/Header\";\r\n\r\nexport const App = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst [isLoading, setIsLoading] = React.useState(true);\r\n\r\n\tuseEffect(() => {\r\n\t\tisLoading && dispatch({ type: \"LOAD_APT_AMOUNT\" });\r\n\t}, [dispatch]);\r\n\r\n\tuseEffect(() => {\r\n\t\t// console.log(gMonth);\r\n\t}, []);\r\n\r\n\treturn (\r\n\t\t<ChakraProvider theme={theme}>\r\n\t\t\t<Grid minH=\"100vh\" p={3} gridTemplateRows=\"min-content\">\r\n\t\t\t\t<ApartmentAmount />\r\n\t\t\t</Grid>\r\n\t\t</ChakraProvider>\r\n\t);\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nconst initialState: [] = [];\r\n\r\nconst aptReducer = (state = initialState, action: any) => {\r\n\tswitch (action.type) {\r\n\t\tcase \"LOAD_APT_SUCCESS\":\r\n\t\t\treturn [...action.payload];\r\n\t\tcase \"LOAD_APT_FAIL\":\r\n\t\t\treturn state;\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\nconst rootReducer = combineReducers({ aptReducer });\r\n\r\nexport default rootReducer;\r\n","import axios from \"axios\";\r\n\r\nconst today: Date = new Date();\r\nconst year = today.getFullYear(); // 년도\r\nconst month = (\"0\" + (today.getMonth() + 1)).slice(-2); // 월\r\nconst month2 = (\"0\" + today.getMonth()).slice(-2); // 전월\r\nconst date = (\"0\" + today.getDate()).slice(-2);\r\nconst yesterday = (\"0\" + (today.getDate() - 1)).slice(-2);\r\n\r\nexport const getToday: string = `${year}${month}${date}`;\r\nexport const getYesterday: string = `${year}${month}${yesterday}`;\r\nexport const lastMonth: string = `${year}${month2}${date}`;\r\nexport const thatMonth: string = `${year}${month}`;\r\n\r\nexport const getUrl = (customMonth = thatMonth) => {\r\n\tconst url = \"http://openapi.molit.go.kr/OpenAPI_ToolInstallPackage/service/rest/RTMSOBJSvc/getRTMSDataSvcAptTradeDev\"; /*URL*/\r\n\tlet queryParams = \"?\" + encodeURIComponent(\"ServiceKey\") + \"=\" + \"HoRvXlHzt4YAth4rfQmkQUXibIMl%2BmmW24iZZ8mYKPg0B9ZAAtYr6kVBtCf2Yf4n2XQWjRnDXZzDvE2XoLwVkg%3D%3D\"; /*Service Key*/\r\n\tqueryParams += \"&\" + encodeURIComponent(\"numOfRows\") + \"=\" + encodeURIComponent(\"100000\"); /* 한페이지 결과 수 */\r\n\tqueryParams += \"&\" + encodeURIComponent(\"LAWD_CD\") + \"=\" + encodeURIComponent(\"41570\"); /* 김포코드 41570 */\r\n\tqueryParams += \"&\" + encodeURIComponent(\"DEAL_YMD\") + \"=\" + encodeURIComponent(customMonth); /**/\r\n\r\n\treturn {\r\n\t\turl,\r\n\t\tqueryParams,\r\n\t};\r\n};\r\n\r\nconst fetchApiData = (gMonth?: string) => {\r\n\tconst { url, queryParams } = getUrl(gMonth);\r\n\r\n\treturn axios({\r\n\t\tmethod: \"GET\",\r\n\t\turl: `https://cors.bridged.cc/${url}${queryParams}`,\r\n\t}).then((response) => {\r\n\t\tconst {\r\n\t\t\tdata: {\r\n\t\t\t\tresponse: {\r\n\t\t\t\t\tbody: {\r\n\t\t\t\t\t\titems: { item },\r\n\t\t\t\t\t},\r\n\t\t\t\t},\r\n\t\t\t},\r\n\t\t} = response;\r\n\t\tconsole.log(item);\r\n\t\treturn item;\r\n\t});\r\n};\r\nexport default fetchApiData;\r\n","import { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport { loadAptSuccess, loadAptFail } from \"../actions/actions\";\r\nimport fetchApiData from \"../fetchData\";\r\n\r\nexport function* workerSaga(): any {\r\n\tconsole.log(\"Hello, worker!\");\r\n\ttry {\r\n\t\tconst item = yield call(fetchApiData);\r\n\t\tyield put(loadAptSuccess(item));\r\n\t} catch (err) {\r\n\t\tyield put(loadAptFail(err));\r\n\t}\r\n}\r\n\r\nfunction* rootSaga() {\r\n\tyield takeEvery(\"LOAD_APT_AMOUNT\", workerSaga);\r\n}\r\n\r\nexport default rootSaga;\r\n","import { getUrl } from \"../fetchData\";\r\n\r\nexport const loadApt = () => {\r\n\treturn {\r\n\t\ttype: \"LOAD_APT\",\r\n\t};\r\n};\r\n\r\nexport const loadAptSuccess = (data: any) => {\r\n\treturn {\r\n\t\ttype: \"LOAD_APT_SUCCESS\",\r\n\t\tpayload: data,\r\n\t};\r\n};\r\n\r\nexport const loadAptFail = (error: any) => {\r\n\treturn {\r\n\t\ttype: \"LOAD_APT_FAIL\",\r\n\t\terror,\r\n\t};\r\n};\r\n","import { ColorModeScript } from \"@chakra-ui/react\";\r\nimport * as React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { App } from \"./App\";\r\nimport rootRecuder from \"./reducers\";\r\nimport rootSaga from \"./saga\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootRecuder, applyMiddleware(sagaMiddleware));\r\n\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n\t<React.StrictMode>\r\n\t\t<ColorModeScript />\r\n\t\t<Provider store={store}>\r\n\t\t\t<App />\r\n\t\t</Provider>\r\n\t</React.StrictMode>,\r\n\tdocument.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}